inheritance:
	-- one object gets access to properties and methods of another object
classical inheritance and prototype inheritance
	-- classical: very verbose, can be end up with a huge, massive collections and tree of objects
	-- prototypal inheritance: something much simpler, flexible, extensible, easy to understand
-> inheritance in js is different from other programming language


prototype
	-- all objects in js (include function) have a `proto` property, property simply reference to another object, we'll
	call it `proto`
		obj object
	-- if we access some poperty of that object, it will first find in the `obj`, if that property not here, it will
	find in `proto` object, in `proto` object, there maybe another `proto` object and it will find in that `proto` object
	it look likes obj.prop1, obj.prop2 but it actually find in `proto` object (obj.proto.proto.prop3)
	-- `Object{}` is always bottom of prototype chain


reflection
	-- an object can look inside itself, changing its properties and methods

Funtion prototype
	-- every function has `prototype` property that starts off its life as an empty object
	-- unless using the function as a funtion constructor, it hangout, do nothing
	-- when you use the `new` operator to invoke the function then it means something

	--- something.prototype: accessing the prototype of this `something` -> but **NO**
	in some case, we can use __proto__ to get access to the prototype

	-- the prototype on a function is NOT the prototype of the fucntion
		--> its the prototype of any objects created if you using the function as a function constructor

	-- used by only `new` operator

	---what happening when set Person.prototype.getName = function()
	-- prototype chain is that every object has specical property to point to anothor object
		-- when you call `new` keyword, it create a new empty object and set prototype of that empty object to 
		the prototype property of the function that you called
		-- so when you create object with that function constructor, not only the properties or methods that you specific
		in the constructor, but the prototype property of the function constructor
	--

Object.create
	-- create an empty object with its prototype pointing to what ever you pass in to `Object.create(<you object>)`



https://medium.com/siliconwat/how-javascript-classes-work-80b0cf483b1d



-- instanceof : if any object down to the prototype chain (__proto__, __proto__, ...), find this type of object-
return true, else return false