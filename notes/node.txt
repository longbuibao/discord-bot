-- tại sao this trong nodejs có lúc trỏ đến một object rỗng, có lúc lại trỏ đến một object rất bự, nhìn có vẻ như là global object?
trích nguyên văn reddit

```
Files in Node.js are considered modules. To implement this idea of modules you'll probably already know (or if not, you'll learn it soon) that you have access to require, and to module, and particularly module.exports. That is, you can do...

module.exports = <whatever>;

...to make that thing be "exported" from the module or "public". This is how modules work, you have to explicitly export whatever you want to be visible from the outside.

But to actually make things work smoothly, there's another point you need to consider. Since there is a mechanism that explicitly exports stuff, then there must be some safeguards to avoid making stuff public without wanting to, right? That is, a "module" needs to be encapsulated somehow.

The way this is done is by running your file/module with a specific value of this which is definitely not the global object. If it was, then... well, people would frequently make mistakes and put stuff on it without wanting to. Instead, your module/file is run with the value of module.exports as the value of this.

```

vì vậy
[11:08 PM]
file server.js thực chất, node xem nó như là một module file bình thường, và node mặc định nghĩ rằng, người dùng sẽ sử dụng cái file này để public ra một cái function nào đó để sử dụng cho file khác
[11:10 PM]
nhưng, nếu có một chức năng như vậy, chỉ muốn lộ ra một số hàm hoặc là một số object, thì cái module đó phải được gói lại theo cách nào đó để nó có thể public ra chính xác hàm, hoặc đối tượng mình cần để lộ ra
[11:11 PM]
chính vì vậy, con trỏ this sẽ được sử dụng làm bộ phận "gói" lại các thành phần mà người dùng muốn lộ ra
[11:12 PM]
khi mà console.log(this) ở trên chính file đó, ngay tại context lúc này, module.exports chưa có đối tượng nào để làm lộ ra hết, chính vì vậy nó sẽ là một object rỗng
[11:13 PM]
khi nó đi vào hàm để thực hiện hàm nào đó, đúng như mong đợi hồi giờ của mình, một context mới sẽ được tạo ra, và ngay lúc này, con trỏ this sẽ được trỏ đến đối tượng global để có thể thực hiện được cái hàm này



agruments.callee
callee is a property of the arguments object. It can be used to refer to the currently executing 
function inside the function body of that function. This is useful when the name of the function is unknown,
such as within a function expression with no name (also called "anonymous functions").

callee là một thuộc tính để chỉ chính cái hàm nó đang chạy. hữu dụng khi mình dùng hàm mà k có tên, sử dụng callee để refer tới cái hàm mà mình đang chạy
ví dụ:

function factorial (n) {
    return !(n > 1) ? 1 : factorial(n - 1) * n;
}

[1, 2, 3, 4, 5].map(factorial);

ở đây callee sẽ là `factorial`

[1, 2, 3, 4, 5].map(function(n) {
    return !(n > 1) ? 1 : /* what goes here? */ (n - 1) * n;
});

nhưng nếu dùng như ri thì sao? k biết được // what gose here là cái gì bởi vì function(n) kia không có cái tên nào hết cho nên mình k gọi lại được
vì vậy solution là sử dụng `agruments.callee`

[1, 2, 3, 4, 5].map(function(n) {
    return !(n > 1) ? 1 : arguments.callee(n - 1) * n;
});


nhưng mà agruments.callee bị bỏ đi khi ở `strict mode`

nhưng mà nó bị bỏ đi ở version khác của js
không nên xài
lí dó gì đó :v

https://stackoverflow.com/questions/103598/why-was-the-arguments-callee-caller-property-deprecated-in-javascript/235760#235760







function overloading: function that have the same name, but different parameters
this doesn't really work in javascript, because funtion are just objects, so that functionality is'nt available, (like in
c++, c#, java)

:v bây giờ mới biêt là trong javascript không có function overloading
https://stackoverflow.com/questions/456177/function-overloading-in-javascript-best-practices

The correct answer is THERE IS NO OVERLOADING IN JAVASCRIPT.

function wrapped with prenthesis () will return that funtion => IIFE
(function test(){return 0})()


closure
là một hàm đươc trả về cùng với các biến ở bên ngoài lexical enviroment mà hàm này có nhu cầu sử dụng
mặc dù sau khi hàm cha trả về hàm con kết thúc chạy và execution context của nó bị mất, nhưng javascript engine 
luôn đảm bảo rằng, 
nếu hàm nhỏ kia có nhu cầu sử dụng lại biến đó thì nó sẽ luôn luôn ở đó, không bị garbage collector dọn đi
tất cả những cái hàm nào mà được tạo trong hàm cha đó, khi mà nó được gọi thì nó sẽ "nhớ" được hết tất cả
 những biến có trong hàm cha, nơi mà nó được tạo ra






















