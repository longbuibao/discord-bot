inheritance:
	-- one object gets access to properties and methods of another object
classical inheritance and prototype inheritance
	-- classical: very verbose, can be end up with a huge, massive collections and tree of objects
	-- prototypal inheritance: something much simpler, flexible, extensible, easy to understand
-> inheritance in js is different from other programming language


prototype
	-- all objects in js (include function) have a `proto` property, property simply reference to another object, we'll
	call it `proto`
		obj object
	-- if we access some poperty of that object, it will first find in the `obj`, if that property not here, it will
	find in `proto` object, in `proto` object, there maybe another `proto` object and it will find in that `proto` object
	it look likes obj.prop1, obj.prop2 but it actually find in `proto` object (obj.proto.proto.prop3)
	-- `Object{}` is always bottom of prototype chain


reflection
	-- an object can look inside itself, changing its properties and methods